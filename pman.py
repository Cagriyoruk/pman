#!/usr/bin/env python3.5

# -*- coding: utf-8 -*-
"""


 _ __  _ __ ___   __ _ _ __
| '_ \| '_ ` _ \ / _` | '_ \
| |_) | | | | | | (_| | | | |
| .__/|_| |_| |_|\__,_|_| |_|
| |
|_|


font generated by:
http://patorjk.com/software/taag/#p=display&f=Doom&t=pman

This module implements a server side job controller/manager
for systems that need to track jobs/processes via a simple
socket interface.

"""
from __future__ import print_function

import  abc
import  json
import  sys
import  datetime
import  time
import  os

import  threading
import  zmq
import  json
# from    urllib      import  urlparse
import  urllib.parse
import  argparse
import  datetime
from    webob       import Response
import  psutil
import  uuid

import  inspect
import  crunner
import  logging

import  C_snode
import  message
from    _colors     import  Colors

logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-10s) %(message)s')

class debug(object):
    """
        A simple class that provides some helper debug functions. Mostly
        printing function/thread names and checking verbosity level
        before printing.
    """

    def __init__(self, **kwargs):
        """
        Constructor
        """

        self.verbosity  = 0
        self.level      = 0

        for k, v in kwargs.items():
            if k == 'verbosity':    self.verbosity  = v
            if k == 'level':        self.level      = v

    def __call__(self, *args, **kwargs):
        self.print(*args, **kwargs)

    def print(self, *args, **kwargs):
        """
        The "print" command for this object.

        :param kwargs:
        :return:
        """

        self.level  = 0
        self.msg    = ""

        for k, v in kwargs.items():
            if k == 'level':    self.level  = v
            if k == 'msg':      self.msg    = v

        if len(args):
            self.msg    = args[0]

        if self.level <= self.verbosity:

            print('%26s | %50s | %30s | ' % (
                datetime.datetime.now(),
                threading.current_thread(),
                inspect.stack()[1][3]
            ), end='')
            for t in range(0, self.level): print("\t", end='')
            print(self.msg)


class pman(object):
    """
    The server class for the pman (process manager) server

    """
    __metaclass__   = abc.ABCMeta


    def log(self, *args):
        """
        get/set the internal pman log message object.

        Caller can further manipulate the log object with object-specific
        calls.
        """
        if len(args):
            self._log = args[0]
        else:
            return self._log

    def name(self, *args):
        """
        get/set the descriptive name text of this object.
        """
        if len(args):
            self.__name = args[0]
        else:
            return self.__name

    def col2_print(self, str_left, str_right):
        print(Colors.WHITE +
              ('%*s' % (self.LC, str_left)), end='')
        print(Colors.LIGHT_BLUE +
              ('%*s' % (self.RC, str_right)) + Colors.NO_COLOUR)

    def __init__(self, **kwargs):
        """

        """


        self.debug              = message.Message(logTo = './debug.log')
        self.debug._b_syslog    = True
        self._log               = message.Message()
        self._log._b_syslog     = True
        self.__name             = "pman"

        self._name              = ""
        self.within             = None                      # An encapsulating object

        # DB
        self.str_DBpath         = '/tmp/pman'
        self._ptree             = C_snode.C_stree()

        # Comms
        self.str_protocol       = "tcp"
        self.str_IP             = "127.0.0.1"
        self.str_port           = "5010"
        self.router_raw         = 0
        self.listeners          = 1
        self.b_http             = False

        # Screen formatting
        self.LC                 = 30
        self.RC                 = 50

        for key,val in kwargs.items():
            if key == 'protocol':   self.str_protocol   = val
            if key == 'IP':         self.str_IP         = val
            if key == 'port':       self.str_port       = val
            if key == 'raw':        self.router_raw     = int(val)
            if key == 'listeners':  self.listeners      = int(val)
            if key == 'http':       self.b_http         = int(val)
            if key == 'within':     self.within         = val

        print(Colors.YELLOW)
        print("""
        \t+-----------------------------------------------+
        \t| Welcome to the pman process management system |
        \t+-----------------------------------------------+
        """)
        print(Colors.CYAN + """
        'pman' is a client/server system that allows users to monitor
        and control processes on (typically) Linux systems. Actual
        processes are spawned using the 'crunner' module and as such
        are ssh and HPC aware.

        The 'pman' server can be queried for running processes, lost/dead
        processes, exit status, etc.

        Communication from the 'pman' server is via JSON constructs.

        Typical calling syntax is:

                ./pman.py --raw 1 --http --ip <someIP> --port 5010

        Note <someIP> should be a full IP/name, and a client can interact with the
        service with a REST call, i.e.

            Using curl:

            curl -H "Content-Type: application/json"        \\
            -X POST                                         \\
            -d '{"payload": {"exec":{"cmd": "name", "args": ["arg1", "arg2", "arg3"]}, "action": "PUSH"}}' \\
            http://10.17.24.163:5010/api/login/


            Using http(ie):

            http POST http://10.17.24.163:5010/api/v1/cmd/  \\
            Content-Type:application/vnd.collection+json    \\
            Accept:application/vnd.collection+json          \\
            payload:='{"exec": {"cmd": "name", "args": ["-a", "arg1", "-b", "arg2"]}, "action": "PUSH"}'

        """)

        self.col2_print('Server is listening on',
                        '%s://%s:%s' % (self.str_protocol, self.str_IP, self.str_port))
        self.col2_print('Router raw mode',
                        str(self.router_raw))
        self.col2_print('HTTP response back mode',
                        str(self.b_http))


        # Read the DB from HDD
        self._ptree             = C_snode.C_stree()
        self.DB_read()

        # Setup zmq context
        self.zmq_context        = zmq.Context()

    def DB_read(self, **kwargs):
        """
        Read the DB from filesystem. If DB does not exist on filesystem,
        create an empty DB and save to filesystem.
        """
        if os.path.isdir(self.str_DBpath):
            self.debug("Reading pman DB from disk...\n")
            self._ptree = C_snode.C_stree.tree_load(
                pathDiskRoot    = self.str_DBpath,
                loadJSON        = True,
                loadPickle      = False)
            self.debug("pman DB read from disk...\n")
            self.col2_print('Reading pman DB from disk:', 'OK')
        else:
            P = self._ptree
            P.cd('/')
            P.mkdir('proc')
            P.tree_save(
                startPath       = '/',
                pathDiskRoot    = self.str_DBpath,
                failOnDirExist  = False,
                saveJSON        = True,
                savePickle      = False
            )
            self.col2_print('Reading pman DB from disk:',
                            'No DB found... creating empty default DB')
        print(Colors.NO_COLOUR, end='')

    def start(self):
        """
            Main execution.

            * Instantiate several 'listener' worker threads
                **  'listener' threads are used to process input from external
                    processes. In turn, 'listener' threads can thread out
                    'crunner' threads that actually "run" the job.
            * Instantiate a job poller thread
                **  'poller' examines the internal DB entries and regularly
                    queries the system process table, tracking if jobs
                    are still running.
        """

        self.col2_print('Starting Listener threads', self.listeners)

        # Front facing socket to accept client connections.
        socket_front = self.zmq_context.socket(zmq.ROUTER)
        socket_front.router_raw = self.router_raw
        socket_front.bind('%s://%s:%s' % (self.str_protocol,
                                          self.str_IP,
                                          self.str_port)
                          )

        # Backend socket to distribute work.
        socket_back = self.zmq_context.socket(zmq.DEALER)
        socket_back.bind('inproc://backend')

        # Start the 'listner' workers.
        for i in range(1,self.listeners+1):
            listener = Listener(    id          = i,
                                    context     = self.zmq_context,
                                    DB          = self._ptree,
                                    http        = self.b_http)
            listener.start()

        # Use built in queue device to distribute requests among workers.
        # What queue device does internally is,
        #   1. Read a client's socket ID and request.
        #   2. Send socket ID and request to a worker.
        #   3. Read a client's socket ID and result from a worker.
        #   4. Route result back to the client using socket ID.
        zmq.device(zmq.QUEUE, socket_front, socket_back)

    def __iter__(self):
        yield('Feed', dict(self._stree.snode_root))

    # @abc.abstractmethod
    # def create(self, **kwargs):
    #     """Create a new tree
    #
    #     """

    def __str__(self):
        """Print
        """
        return str(self.stree.snode_root)

    @property
    def stree(self):
        """STree Getter"""
        return self._stree

    @stree.setter
    def stree(self, value):
        """STree Getter"""
        self._stree = value

class Listener(threading.Thread):
    """ Listeners accept computation requests from front facing server.
        Parse input text streams and act accordingly. """

    def log(self, *args):
        """
        get/set the internal pipeline listener object.

        Caller can further manipulate the log object with object-specific
        calls.
        """
        if len(args):
            self._log = args[0]
        else:
            return self._log

    def name(self, *args):
        """
        get/set the descriptive name text of this object.
        """
        if len(args):
            self.__name = args[0]
        else:
            return self.__name

    def __init__(self, **kwargs):
        logging.debug('Starting __init__')
        self.debug              = message.Message(logTo = './debug.log')
        self.debug._b_syslog    = True
        self._log               = message.Message()
        self._log._b_syslog     = True
        self.__name             = "Listener"
        self.b_http             = False
        self.dp                 = debug(verbosity=0, level=-1)

        for key,val in kwargs.items():
            if key == 'context':        self.zmq_context    = val
            if key == 'id':             self.worker_id      = val
            if key == 'DB':             self._ptree         = val
            if key == 'http':           self.b_http         = val

        threading.Thread.__init__(self)
        logging.debug('leaving __init__')

    def run(self):
        """ Main execution. """
        # Socket to communicate with front facing server.
        logging.debug('Starting run...')
        self.dp.print('starting...')
        socket = self.zmq_context.socket(zmq.DEALER)
        socket.connect('inproc://backend')

        while True:
            print(Colors.BROWN + "Listener ID - %s: run() - Ready to serve..." % self.worker_id)
            # First string received is socket ID of client
            client_id   = socket.recv()
            request     = socket.recv()
            print("\n" + Colors.BROWN + 'Listener ID - %s: run() - Received comms from client.' % (self.worker_id))
            result = self.process(request)
            # try:
            #     result = self.process(request)
            # except:
            #     print('Worker ID - %s. some error was detected' % (self.worker_id))
            #     os._exit(1)

            # For successful routing of result to correct client, the socket ID of client should be sent first.
            if result:
                print(Colors.BROWN + 'Listener ID - %s: run() - Sending response to client.' %
                      (self.worker_id))
                print('JSON formatted response:')
                str_payload = json.dumps(result)
                print(Colors.LIGHT_CYAN + str_payload)
                print(Colors.BROWN + 'len = %d chars' % len(str_payload))
                socket.send(client_id, zmq.SNDMORE)
                if self.b_http:
                    str_contentType = "application/json"
                    res  = Response(str_payload)
                    res.content_type = str_contentType

                    str_HTTPpre = "HTTP/1.x "
                    str_res     = "%s%s" % (str_HTTPpre, str(res))
                    str_res     = str_res.replace("UTF-8", "UTF-8\nAccess-Control-Allow-Origin: *")

                    socket.send(str_res.encode())
                else:
                    socket.send(str_payload)
                if result['ctl'] == 'QUIT': os._exit(1)

    def process(self, request):
        """ Process the message from remote client

        In some philosophical respects, this process() method in fact implements
        REST-like API of its own.

        """

        if len(request):

            print("Listener ID - %s: process() - handling request" % (self.worker_id))

            now             = datetime.datetime.today()
            str_timeStamp   = now.strftime('%Y-%m-%d %H:%M:%S.%f')
            print(Colors.YELLOW)
            print("\n\n***********************************************")
            print("***********************************************")
            print("%s incoming data stream" % (str_timeStamp) )
            print("***********************************************")
            print("len = %d" % len(request))
            print("***********************************************")
            print(Colors.CYAN + "%s\n" % (request.decode()) + Colors.YELLOW)
            print("***********************************************" + Colors.NO_COLOUR)
            l_raw           = request.decode().split('\n')
            FORMtype        = l_raw[0].split('/')[0]

            print('Request = ...')
            print(l_raw)
            json_payload            = l_raw[-1]
            str_CTL                 = ''
            if len(json_payload):
                d_payload           = json.loads(json_payload)
                d_request           = d_payload['payload']
                print("|||||||")
                print(d_request)
                print("|||||||")
                str_verb            = d_request['action']
                d_exec              = d_request['exec']

                # o_URL               = urlparse(str_URL)
                # str_path            = o_URL.path
                # l_path              = str_path.split('/')[2:]

                str_CTL             = "RUN"
                if str_verb == 'QUIT':
                    print('Shutting down server...')
                    str_CTL = "QUIT"

                if str_verb == 'PULL' or str_verb == 'GET':
                    print("In PULL/GET")

                if str_verb == 'PUSH':
                    print("In PUSH")
                    # Start the 'poller' worker
                    poller  = Poller()
                    poller.start()

            return {
                    'ctl':      str_CTL,
                    'status':   True
                    }

class Poller(threading.Thread):
    """
    The Poller checks for running processes based on the internal
    DB and system process table. Jobs that are no longer running are
    removed from the internal DB.
    """
    def log(self, *args):
        """
        get/set the poller log object.

        Caller can further manipulate the log object with object-specific
        calls.
        """
        if len(args):
            self._log = args[0]
        else:
            return self._log

    def name(self, *args):
        """
        get/set the descriptive name text of this object.
        """
        if len(args):
            self.__name = args[0]
        else:
            return self.__name

    def __init__(self, **kwargs):
        self.debug              = message.Message(logTo = './debug.log')
        self.debug._b_syslog    = True
        self._log               = message.Message()
        self._log._b_syslog     = True
        self.__name             = "Poller"

        self.pollTime           = 10

        self.dp                 = debug(verbosity=0, level=-1)

        self.dp.print('starting...', level=-1)

        for key,val in kwargs.items():
            if key == 'pollTime':       self.pollTime       = val

        threading.Thread.__init__(self)


    def run(self):

        timeout = 1
        loop    = 10

        """ Main execution. """
        logging.debug('in run...')

        # Spawn the crunner object container
        crunner  = Crunner()
        crunner.start()

        # Now poll...
        while True:
            time.sleep(timeout)
            self.dp.print("tick...")


class Crunner(threading.Thread):
    """
    The wrapper thread about the actual process.
    """

    def log(self, *args):
        """
        get/set the internal crunner object.

        Caller can further manipulate the log object with object-specific
        calls.
        """
        if len(args):
            self._log = args[0]
        else:
            return self._log

    def name(self, *args):
        """
        get/set the descriptive name text of this object.
        """
        if len(args):
            self.__name = args[0]
        else:
            return self.__name

    def run(self):

        timeout = 1
        loop    = 10

        """ Main execution. """
        self.dp.print("running...")
        self.shell.verbosity    = 10
        self.shell('sleep 10')
        self.shell.jobs_loopctl(    onJobStart  = "print('Start!')",
                                    onJobEnd    = "print('End!)'")
        self.shell.exitOnDone()

    def __init__(self, **kwargs):
        self.debug              = message.Message(logTo = './debug.log')
        self.debug._b_syslog    = True
        self._log               = message.Message()
        self._log._b_syslog     = True
        self.__name             = "Crunner"
        self.dp                 = debug(verbosity=0, level=-1)

        self.dp.print('starting crunner...', level=-1)


        self.shell              = crunner.crunner()

        threading.Thread.__init__(self)


if __name__ == "__main__":

    parser  = argparse.ArgumentParser(description = 'simple client for talking to pman')

    parser.add_argument(
        '--ip',
        action  = 'store',
        dest    = 'ip',
        default = '127.0.0.1',
        help    = 'IP to connect.'
    )
    parser.add_argument(
        '--port',
        action  = 'store',
        dest    = 'port',
        default = '5010',
        help    = 'Port to use.'
    )
    parser.add_argument(
        '--protocol',
        action  = 'store',
        dest    = 'protocol',
        default = 'tcp',
        help    = 'Protocol to use.'
    )
    parser.add_argument(
        '--raw',
        action  = 'store',
        dest    = 'raw',
        default = '0',
        help    = 'Router raw mode.'
    )
    parser.add_argument(
        '--listeners',
        action  = 'store',
        dest    = 'listeners',
        default = '1',
        help    = 'Number of listeners.'
    )
    parser.add_argument(
        '--http',
        action  = 'store_true',
        dest    = 'http',
        default = False,
        help    = 'Send HTTP formatted replies.'
    )


    args    = parser.parse_args()

    comm    = pman(
                    IP          = args.ip,
                    port        = args.port,
                    protocol    = args.protocol,
                    raw         = args.raw,
                    listeners   = args.listeners,
                    http        = args.http
                    )
    comm.start()
